name: on_workflow_run

on:
  push:
    branches:
      - main
  workflow_run:
    workflows:
      - on_pull_request
    types:
      - completed

jobs:
  safe-job:
    if: github.event.workflow_run.conclusion == 'success' || !github.event.workflow_run.head_repository.fork
    name: Safe workflow ${{ github.event.workflow_run.head_branch || 'main' }}
    runs-on: ubuntu-latest
    permissions:
      # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token
      issues: write         # Permission to remove a label
      pull-requests: write  # Permission to remove a label
      statuses: write       # Permission to create a commit status
    env:
      COMMIT_SHA: ${{ github.event.workflow_run.head_sha || github.sha }}
      CHECK_NAME: on_workflow_run job with full access
      CHECK_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: GitHub context information
        run: |
          echo "github.repository_owner: ${{ github.repository_owner }}"
          echo "github.event.repository.name: ${{ github.event.repository.name }}"
          echo "github.event.repository.fork: ${{ github.event.repository.fork }}"
          echo "github.sha: ${{ github.sha }}"
          echo "github.event.workflow_run.event.label.name: ${{ github.event.workflow_run.event.label.name }}"
          echo "github.event.workflow_run.head_branch: ${{ github.event.workflow_run.head_branch }}"
          echo "github.event.workflow_run.head_sha: ${{ github.event.workflow_run.head_sha }}"
          echo "github.event.workflow_run.head_repository.id: ${{ github.event.workflow_run.head_repository.id }}"
          echo "github.event.workflow_run.head_repository.fork: ${{ github.event.workflow_run.head_repository.fork }}"
          echo "github.event.workflow_run.head_repository.owner.login: ${{ github.event.workflow_run.head_repository.owner.login }}"
          echo "github.event.workflow_run.head_repository.name: ${{ github.event.workflow_run.head_repository.name }}"
      - run: echo "github.event.workflow_run.event = $CONTEXT"
        env:
          CONTEXT: ${{ toJson(github.event.workflow_run.event) }}
      - run: echo "github.event.workflow_run.head_repository = $CONTEXT"
        env:
          CONTEXT: ${{ toJson(github.event.workflow_run.head_repository) }}
      - run: echo "github.event.workflow_run = $CONTEXT"
        env:
          CONTEXT: ${{ toJson(github.event.workflow_run) }}
      - run: echo "github.event.repository = $CONTEXT"
        env:
          CONTEXT: ${{ toJson(github.event.repository) }}
      - run: echo "github.event = $CONTEXT"
        env:
          CONTEXT: ${{ toJson(github.event) }}
      - run: echo "github = $CONTEXT"
        env:
          CONTEXT: ${{ toJson(github) }}

      - name: Authorizing
        uses: actions/github-script@v7
        with:
          # https://octokit.github.io/rest.js/v21/#repos-list-pull-requests-associated-with-commit
          script: |
            const label = 'force-run';

            // https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-pull-requests-associated-with-a-commit
            // https://octokit.github.io/rest.js/v21/#repos-list-pull-requests-associated-with-commit
            const response = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: "${{ github.event.workflow_run.head_repository.owner.login }}",
              repo: "${{ github.event.repository.name }}",
              commit_sha: "${{ github.event.workflow_run.head_branch }}",
            });

            for (const pr of response.data) {
              console.log(`PR #${pr.number} fork=${pr.head.repo.fork}`)

              // https://docs.github.com/en/rest/issues/labels?apiVersion=2022-11-28#remove-a-label-from-an-issue
              // https://octokit.github.io/rest.js/v21/#issues-remove-label
              const labels = pr.labels.flatMap(label => label.name);
              if (labels.includes(label)) {
                console.log(`  ✅ Allowed, removing label '${label}'`)
                github.rest.issues.removeLabel({
                  issue_number: pr.number,
                  owner: "${{ github.repository_owner }}",
                  repo: "${{ github.event.repository.name }}",
                  name: [label],
                });
              } else if (pr.head.repo.fork) {
                // https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status
                // https://octokit.github.io/rest.js/v21/#repos-create-commit-status
                console.log(`  ❌ Blocked, label '${label}' not found`)
                const error = `Job not allowed, please add the '${label}' label.`
                await github.rest.repos.createCommitStatus({
                    owner: "${{ github.repository_owner }}",
                    repo: "${{ github.event.repository.name }}",
                    sha: "${{ env.COMMIT_SHA }}",
                    state: "failure",
                    target_url: "${{ env.CHECK_URL }}",
                    description: error,
                    context: "${{ env.CHECK_NAME }}",
                });
                throw error;
              } else {
                console.log(`  ✅ Allowed (not from forked repository)`)
              }

              // https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status
              // https://octokit.github.io/rest.js/v21/#repos-create-commit-status
              console.log(`  Creating status as 'pending'`)
              github.rest.repos.createCommitStatus({
                  owner: "${{ github.repository_owner }}",
                  repo: "${{ github.event.repository.name }}",
                  sha: "${{ env.COMMIT_SHA }}",
                  state: "pending",
                  target_url: "${{ env.CHECK_URL }}",
                  description: "The job is running, click 'Details' to see progress.",
                  context: "${{ env.CHECK_NAME }}",
              });
            }

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.COMMIT_SHA }}

      - name: Running sensitive code
        id: test
        run: |
          START=$(date +%s)
          sh tests.sh
          END=$(date +%s)
          ELAPSED=$(echo "$START - $END" | bc)
          echo "Successful in ${ELAPSED}s"
          echo "elapsed=$ELAPSED" >> "$GITHUB_OUTPUT"

      - name: Mark status as success
        uses: actions/github-script@v7
        with:
          script: |
            // https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status
            // https://octokit.github.io/rest.js/v21/#repos-create-commit-status
            github.rest.repos.createCommitStatus({
                owner: "${{ github.repository_owner }}",
                repo: "${{ github.event.repository.name }}",
                sha: "${{ env.COMMIT_SHA }}",
                state: "success",
                target_url: "${{ env.CHECK_URL }}",
                description: "Successful in ${{ steps.test.outputs.elapsed }}s",
                context: "${{ env.CHECK_NAME }}",
            });